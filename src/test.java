package test;

import java.io.BufferedReader;
import java.io.FileReader;
import static com.sun.xml.internal.fastinfoset.alphabet.BuiltInRestrictedAlphabets.table;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.*;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JScrollPane;
import javax.swing.JSeparator;
import javax.swing.JTable;
import javax.swing.Popup;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.border.EmptyBorder;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;

/**
 *
 * @author Family
 */
@SuppressWarnings({ "unused", "serial" })
public class test extends JFrame {
	// DefaultTableModel jTable21= new DefaultTableModel();
	/**
	 * Creates new form ProgrammeInterface
	 */
	Object[][] model;
	Object[][] detailed_model;
	int row_position;
	int column_position;

	public test() {
		new ProgrammListModel().buildProgrammeListFile();
		model = new ProgrammListModel().getProgrammeListData();
		detailed_model = new ProgrammListModel().getDetailedProgrammeList();
		initComponents(model);
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */

	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents(Object[][] model) {
		Date DateNow = new Date();
		int second, minute, hour, AmPm;

		Calendar cal = new GregorianCalendar();
		hour = cal.get(Calendar.HOUR);
		minute = cal.get(Calendar.MINUTE);
		AmPm = cal.get(Calendar.AM_PM);

		String timeOfDay = "";

		if (AmPm == 1) {
			timeOfDay = "PM";

		} else {
			timeOfDay = "AM";
		}
		String time = hour + ":" + minute + "" + timeOfDay;

		JLabel jLabel1 = new JLabel();
		JScrollPane jScrollPane2 = new JScrollPane();

		jTable2 = new JTable(/* new FilesTable() */) {
			public Component prepareRenderer(TableCellRenderer r, int col, int row) {

				Component comp = super.prepareRenderer(r, row, col);

				comp.setBackground(Color.WHITE);
				if (col == 0) {
					comp.setBackground(Color.WHITE);
					comp.setFont(new Font("Burton Sketch", 1, 2));
					comp.setForeground(Color.BLACK);

				}
				if (col == 1) {
					comp.setBackground(Color.WHITE);
					comp.setFont(new Font("Burton Sketch", 1, 12));
					comp.setForeground(Color.BLACK);

				}
				if (col == 2) {
					comp.setBackground(Color.MAGENTA);
					comp.setFont(new Font("Burton Sketch", 1, 12));
					comp.setForeground(Color.BLACK);

				}
				if (col == 3) {
					comp.setBackground(Color.RED);
					comp.setFont(new Font("Burton Sketch", 1, 12));
					comp.setForeground(Color.BLACK);

				}
				if (col == 4) {
					comp.setBackground(Color.RED);
					comp.setFont(new Font("Burton Sketch", 1, 12));

				}
				if (col == 5) {
					comp.setBackground(Color.BLUE);
					comp.setFont(new Font("Burton Sketch", 1, 12));
					comp.setForeground(Color.BLACK);

				}
				if (col == 6) {
					comp.setBackground(Color.GREEN);
					comp.setFont(new Font("Burton Sketch", 1, 12));
					comp.setForeground(Color.BLACK);

				}
				if (col == 7) {
					comp.setBackground(Color.YELLOW);
					comp.setFont(new Font("Burton Sketch", 1, 12));
					comp.setForeground(Color.BLACK);

				}
				if (col == 8) {
					comp.setBackground(Color.WHITE);
					comp.setFont(new Font("Burton Sketch", 1, 12));
					comp.setForeground(Color.BLACK);

				}
				if (col == 9) {
					comp.setBackground(Color.WHITE);
					comp.setFont(new Font("Burton Sketch", 1, 12));
					comp.setForeground(Color.BLACK);

				}
				if (col == 10) {
					comp.setBackground(Color.WHITE);
					comp.setFont(new Font("Burton Sketch", 1, 12));
					comp.setForeground(Color.BLACK);

				}
				// jTable2 = new JTable(new FilesTable());

				return comp;

			}
		};

		/*
		 * jTable21.addColumn("Channels");
		 * jTable21.addColumn((hour++)+":00"+timeOfDay);
		 * jTable21.addColumn((hour++)+":00"+timeOfDay);
		 * jTable21.addColumn((hour++)+":00"+timeOfDay);
		 * jTable21.addColumn((hour++)+":00"+timeOfDay);
		 * jTable21.addColumn((hour++)+":00"+timeOfDay);
		 * jTable21.addColumn((hour++)+":00"+timeOfDay);
		 * jTable21.addColumn((hour++)+":00"+timeOfDay);
		 */

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

		jLabel1.setText(
				"JCTCT Cable TV Programme Listing         " + "       " + "            " + "           " + DateNow);
		jLabel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED,
				java.awt.Color.cyan, java.awt.Color.lightGray, null, java.awt.Color.black));

		jScrollPane2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null,
				new java.awt.Color(153, 153, 255), null, null));
		jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
		jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
		jScrollPane2.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);

		jTable2.setAutoCreateColumnsFromModel(true);

		jTable2.setModel(new javax.swing.table.DefaultTableModel(
				new Object[][] {
						{ "200- News", "201-TLC", "202-Disney Jnr", "203-Lifetime", "204-HBO Max", "205-TBN",
								"206-Today Weather", "207-TBS", "208-MTV", "209-TNT", "210-USA" },
						{ null, null, null, null }, { null, null, null, null }, { null, null, null, null },
						{ null, null, null, null }, { null, null, null, null }, { null, null, null, null },
						{ null, null, null, null }, { null, null, null, null }, { null, null, null, null },
						{ null, null, null, null }, { null, null, null, null }, { null, null, null, null },
						{ null, null, null, null }, { null, null, null, null }, { null, null, null, null },
						{ null, null, null, null }, { null, null, null, null }, { null, null, null, null },
						{ null, null, null, null }, { null, null, null, null }, { null, null, null, null },
						{ null, null, null, null }, { null, null, null, null }, { null, null, null, null },},
				new String[] { "Channels", (hour++) + ":00" + timeOfDay, (hour++) + ":00" + timeOfDay,
						(hour++) + ":00" + timeOfDay, (hour++) + ":00" + timeOfDay, (hour++) + ":00" + timeOfDay,
						(hour++) + ":00" + timeOfDay, (hour++) + ":00" + timeOfDay, (hour++) + ":00" + timeOfDay,
						(hour++) + ":00" + timeOfDay, (hour++) + ":00" + timeOfDay, (hour++) + ":00" + timeOfDay,
						(hour++) + ":00" + timeOfDay, (hour++) + ":00" + timeOfDay, (hour++) + ":00" + timeOfDay,
						(hour++) + ":00" + timeOfDay, (hour++) + ":00" + timeOfDay, (hour++) + ":00" + timeOfDay,
						(hour++) + ":00" + timeOfDay,(hour++) + ":00" + timeOfDay
		}));

		TableColumn column = null;
		for (int i = 0; i < 18; i++) {
			column = jTable2.getColumnModel().getColumn(i);
			if (i > 0) {
				column.setPreferredWidth(200); // third column is bigger
			} else {
				column.setPreferredWidth(150);
			}
		}

		int column_count = 0;
		int data_row = 0;
		int data_column = 0;
		for (int i = 1; i < 11; i++) {
			while (column_count < 18) {
				jTable2.setValueAt(model[data_column][data_row], i, column_count);
				data_column++;
				column_count++;
			}
			data_row++;
			data_column = 0;
			column_count = 0;
		}

		final Popup pop = new Popup(jTable2);

		// Event
		jTable2.addMouseListener(new MouseAdapter() {
			public void mouseClicked(MouseEvent me) {
				// determine if right clicked
				//System.out.println(detailed_model[jTable2.rowAtPoint(me.getPoint())][jTable2.columnAtPoint(me.getPoint())]);
				row_position = jTable2.rowAtPoint(me.getPoint());
				column_position = jTable2.columnAtPoint(me.getPoint());
				if (SwingUtilities.isRightMouseButton(me)) {
					pop.show(me.getComponent(), me.getX(), me.getY());
				}

			}
		});

		jTable2.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {

		});

		jTable2.setPreferredScrollableViewportSize(new Dimension(1800, 400));
		jTable2.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
		jTable2.getTableHeader().setReorderingAllowed(false);
		jTable2.setColumnSelectionAllowed(true);
		jTable2.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
		jTable2.setDragEnabled(true);
		jTable2.setInheritsPopupMenu(true);
		jTable2.setIntercellSpacing(new java.awt.Dimension(3, 3));
		jTable2.setBounds(300, 300, 100, 200);
		jScrollPane2.setViewportView(jTable2);

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
						Short.MAX_VALUE)
				.addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 551, Short.MAX_VALUE));
		layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup()
						.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addComponent(jLabel1)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(jScrollPane2,
								javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
				.addContainerGap()));

		pack();
	}// </editor-fold>

	public class Popup extends JPopupMenu {

		public Popup(JTable table) {
			// Pop Up Items
			JMenuItem description = new JMenuItem("Description");
			JMenuItem mark = new JMenuItem("Mark");

			// When description is clicked
			description.addActionListener(new ActionListener() {
				@Override
				public void actionPerformed(ActionEvent arg0) {
					JOptionPane.showMessageDialog(description, detailed_model[row_position][column_position]);
				}
			});

			// When description is clicked
			mark.addActionListener(new ActionListener() {
				@Override
				public void actionPerformed(ActionEvent e) {
					JOptionPane.showMessageDialog(mark, "Watch Later");
				}
			});

			add(description);
			add(new JSeparator());
			add(mark);

		}

	}

	/**
	 * @param args
	 *            the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		// <editor-fold defaultstate="collapsed" desc=" Look and feel setting
		// code (optional) ">
		/*
		 * If Nimbus (introduced in Java SE 6) is not available, stay with the
		 * default look and feel. For details see
		 * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.
		 * html
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(test.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(test.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(test.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(test.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		// </editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new test().setVisible(true);

			}
		});
	}

	// Variables declaration - do not modify
	private javax.swing.JLabel jLabel1;
	private javax.swing.JScrollPane jScrollPane2;
	private javax.swing.JTable jTable2;
	// End of variables declaration
}
